  services:
    juice-shop:
      image: bkimminich/juice-shop
      container_name: juice-shop
      environment:
        LOG_LEVEL: debug
      networks:
        backend:
          ipv4_address: 10.10.10.100
    
    nginx-modsec:
      build:
        context: nginx-modsec
        dockerfile: Dockerfile
      container_name: nginx-modsec
      environment:
        MODSEC_AUDIT_LOG: /var/log/nginx/modsec_audit.log
        MODSEC_RULE_ENGINE: DetectionOnly
      volumes:
        - ./nginx-log:/var/log/nginx:rw
      ports:
        - 80:80
      networks:
        backend:
          ipv4_address: 10.10.10.200

    sql-injection:
      image: curlimages/curl:latest
      container_name: sql-injection
      depends_on:
        - juice-shop
      entrypoint: >
        sh -c "
          sleep 5 &&
          while true; do
            echo && curl -o /dev/null -s -w \"%{http_code}\" -X POST -d email=admin@juice-shop.com -d password=\\'\\ OR\\ \\1\\=\\1 http://www.juiceshop.com/rest/user/login;
            echo && curl -o /dev/null -s -w \"%{http_code}\" -X POST -d email=test@evil.com -d password=\\'\\ OR\\ \\x\\=\\x http://www.juiceshop.com/rest/user/login;
            sleep 5;
          done
        "
      networks:
        - backend
      extra_hosts:
        - "www.juiceshop.com:10.10.10.200"

    flag-injection:
      image: curlimages/curl:latest
      container_name: flag-injection
      depends_on:
        - juice-shop
      entrypoint: >
        sh -c "
          sleep 5 &&
          curl -o /dev/null -s -w '%{http_code}' -X POST -d 'flag{w4f_detection_enabled}' http://www.juiceshop.com/rest/product/1/reviews;
        "
      extra_hosts:
        - "www.juiceshop.com:10.10.10.200"
      networks:
        backend:
          ipv4_address: 10.10.10.150

    xss-attack:
      image: curlimages/curl:latest
      container_name: xss-attack
      depends_on:
        - juice-shop
      entrypoint: >
        sh -c "
          sleep 5 &&
          while true; do
            echo && curl -o /dev/null -s -w "%{http_code}" -X POST -d 'comment=<script>alert(\"XSS\")</script>' http://www.juiceshop.com/rest/product/1/reviews;
            echo && curl -o /dev/null -s -w "%{http_code}" -X POST -d 'comment=<img src=\"invalid-url\" onerror=\"alert(1)\">' http://www.juiceshop.com/rest/product/1/reviews;
            sleep 5;
          done
        "
      networks:
        - backend
      extra_hosts:
        - "www.juiceshop.com:10.10.10.200"

    legitimate-traffic:
      image: curlimages/curl:latest
      container_name: legitimate-traffic
      depends_on:
        - juice-shop
      entrypoint: >
        sh -c "
          sleep 5 &&
          while true; do
              echo && curl -o /dev/null -s -w '%{http_code}' -X GET http://www.juiceshop.com/;     
              echo && curl -o /dev/null -s -w '%{http_code}' -X GET http://www.juiceshop.com/assets/public/css/styles.css;
            sleep 10;
          done
        "
      networks:
        - backend
      extra_hosts:
        - "www.juiceshop.com:10.10.10.200"

    redis:
      image: redis:7-alpine
      container_name: redis
      environment:
        - REDIS_PASSWORD=gQr8qHroGX7gqj6Gf+AsFSaHhbjN2AJCKak3k34HX4l0/kR5
      networks:
        - monitoring
      command: redis-server --requirepass gQr8qHroGX7gqj6Gf+AsFSaHhbjN2AJCKak3k34HX4l0/kR5 --bind 0.0.0.0

    filebeat:
      build:
        context: monitoring
        dockerfile: Logstash.Dockerfile
      container_name: filebeat
      user: root
      command: filebeat -e
      volumes:
        - ./nginx-log:/var/log/nginx
      networks:
        - monitoring
      depends_on:
        - redis

    logstash:
      image: docker.elastic.co/logstash/logstash:8.17.0
      container_name: logstash
      volumes:
        - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        - ./monitoring/MOCK_DATA.csv:/data/MOCK_DATA.csv
      networks:
        - monitoring
      depends_on:
        - redis
        - elasticsearch

    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
      container_name: elasticsearch
      environment:
        - discovery.type=single-node
        - xpack.security.enabled=false
      networks:
        - monitoring

    grafana:
      image: grafana/grafana:11.4.0
      container_name: grafana
      ports:
        - "3000:3000"
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=grafana
      volumes:
        - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
        - ./monitoring/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      networks:
        - monitoring
      depends_on:
        - elasticsearch
      entrypoint: ["/bin/bash", "-c", "until curl -s http://elasticsearch:9200; do echo 'Esperando a Elasticsearch...'; sleep 5; done; exec /run.sh"]


  networks:
    backend:
      driver: bridge
      ipam:
        driver: default
        config:
          - subnet: 10.10.10.0/24
    monitoring: